{"0": {
    "doc": "Asset",
    "title": "Asset",
    "content": "Asset ===== *Represents data that can be shared to other clients in the Alloverse An asset is just raw data* ## Methods ### Asset:_init (data) *Create a new asset* #### Arguments | Name | Type | Description | ---- | ---- | --------------- | data | ??? | string Raw data for the asset. | #### Returns *Nothing* --- ### Asset:read (offset, length) *Read a part of the data* #### Arguments | Name | Type | Description | ------ | ---- | --------------- | offset | ??? | number The byte to start reading from | length | ??? | number The number of bytes to read | #### Returns | Description | --------------- | string the requested data | --- ### Asset:write (data, offset, totalSize) *Write a part of the data* #### Arguments | Name | Type | Description | --------- | ---- | --------------- | data | ??? | string The data buffering | offset | ??? | number The byte offset to start writing at | totalSize | ??? | number The expected total size of the asset. | #### Returns *Nothing* --- ### Asset:size () *Returns the size of the asset* #### Arguments *None* #### Returns | Description | --------------- | number The size of the data | --- ### Asset:id (refresh) *Returns a computed unique identifier for this asset The id is a hash of the asset data.* This ensures the same asset identifier is always matched with the same data #### Arguments | Name | Type | Description | ------- | ---- | --------------- | refresh | ??? | boolean By default a cached hash is returned, if one is available. Send `refresh` to true to recompute the id | #### Returns *Nothing* --- ",
    "url": "/doc/classes/Asset.html",
    "relUrl": "/doc/classes/Asset.html"
  },"1": {
    "doc": "AssetManager",
    "title": "AssetManager",
    "content": "AssetManager ============ ** ",
    "url": "/doc/classes/AssetManager.html",
    "relUrl": "/doc/classes/AssetManager.html"
  },"2": {
    "doc": "AssetView",
    "title": "AssetView",
    "content": "AssetView ========= ** ",
    "url": "/doc/classes/AssetView.html",
    "relUrl": "/doc/classes/AssetView.html"
  },"3": {
    "doc": "Base64Asset",
    "title": "Base64Asset",
    "content": "Base64Asset =========== ** ",
    "url": "/doc/classes/Base64Asset.html",
    "relUrl": "/doc/classes/Base64Asset.html"
  },"4": {
    "doc": "Button",
    "title": "Button",
    "content": "Button ====== *Button can be poked/clicked to perform an action.* Set onActivated to a function you'd like to be called when the button is pressed. button.label:setText(...) to the string you want on the button. You can also set the button's default, highlighted and activated texture (see Surface documentation for image format caveats). Or if you just want a colored button, you can set its color. Set either color or texture to nil to remove that attribute. ",
    "url": "/doc/classes/Button.html",
    "relUrl": "/doc/classes/Button.html"
  },"5": {
    "doc": "FileAsset",
    "title": "FileAsset",
    "content": "FileAsset ========= ** ",
    "url": "/doc/classes/FileAsset.html",
    "relUrl": "/doc/classes/FileAsset.html"
  },"6": {
    "doc": "GrabHandle",
    "title": "GrabHandle",
    "content": "GrabHandle ========== *A widget for moving something; think of it as the title bar of a window.* Grabbing the title bar moves the window, not the title bar. Same here; set this as the subview of your root view to make it movable. You can set any bounds on this handle to position it at a good location in your view. ",
    "url": "/doc/classes/GrabHandle.html",
    "relUrl": "/doc/classes/GrabHandle.html"
  },"7": {
    "doc": "Label",
    "title": "Label",
    "content": "Label ===== *A text label.* ## Methods ### Label:_init (o) *Label{bounds=,text=,lineheight=,wrap=,halign=,color={r,g,b,a}} Label(bounds)* #### Arguments | Name | Type | Description | ---- | ---- | ----------- | o | ??? | #### Returns *Nothing* --- ",
    "url": "/doc/classes/Label.html",
    "relUrl": "/doc/classes/Label.html"
  },"8": {
    "doc": "Speaker",
    "title": "Speaker",
    "content": "Speaker ======= *A place to emit sound from.* Allocates an audio track on backend when created. Use it e g like this to send audio you generate 20ms at a time: app:scheduleAction(0.02, true, function() local leftAudio, rightAudio = player:generateAudio(960) if left and leftSpeaker.trackId then app.client.client:send_audio(leftSpeaker.trackId, leftAudio) end end) ",
    "url": "/doc/classes/Speaker.html",
    "relUrl": "/doc/classes/Speaker.html"
  },"9": {
    "doc": "Surface",
    "title": "Surface",
    "content": "Surface ======= *Surface* ",
    "url": "/doc/classes/Surface.html",
    "relUrl": "/doc/classes/Surface.html"
  },"10": {
    "doc": "TextField",
    "title": "TextField",
    "content": "TextField ========= *TextField* ## Methods ### TextField:_init (o) *TextField{bounds=,text=,lineheight=,wrap=,halign=,color={r,g,b,a}} TextField(bounds)* #### Arguments | Name | Type | Description | ---- | ---- | ----------- | o | ??? | #### Returns *Nothing* --- ",
    "url": "/doc/classes/TextField.html",
    "relUrl": "/doc/classes/TextField.html"
  },"11": {
    "doc": "View",
    "title": "View",
    "content": "View ==== *A view* ## Methods ### View:specification () *The specification is used to describe the entity three required to represent this view inside the Alloverse.* In a subclass, call this implementation and then add/modify your own components. #### Arguments *None* #### Returns *Nothing* --- ### View:updateComponents (changes) *Ask backend to update components on the server.* Use to update things you've specified in :specification() but now want to change. #### Arguments | Name | Type | Description | ------- | ---- | ----------- | changes | ??? | #### Returns *Nothing* --- ### View:onInteraction (inter, body, sender) *an interaction message was sent to this specific view.* See https://github.com/alloverse/docs/blob/master/specifications/interactions.md #### Arguments | Name | Type | Description | ------ | ---- | ----------- | inter | ??? | | body | ??? | | sender | ??? | #### Returns *Nothing* --- ",
    "url": "/doc/classes/View.html",
    "relUrl": "/doc/classes/View.html"
  },"12": {
    "doc": "allonet.include.allonet.assetstore",
    "title": "allonet.include.allonet.assetstore",
    "content": "allonet.include.allonet.assetstore ================================== *Api for asset handling* ",
    "url": "/doc/modules/allonet.include.allonet.assetstore.html",
    "relUrl": "/doc/modules/allonet.include.allonet.assetstore.html"
  },"13": {
    "doc": "allonet.include.allonet.client",
    "title": "allonet.include.allonet.client",
    "content": "allonet.include.allonet.client ============================== *Asset became available* ",
    "url": "/doc/modules/allonet.include.allonet.client.html",
    "relUrl": "/doc/modules/allonet.include.allonet.client.html"
  },"14": {
    "doc": "allonet.include.allonet.jobs",
    "title": "allonet.include.allonet.jobs",
    "content": "allonet.include.allonet.jobs ============================ *A scheduler instance* ",
    "url": "/doc/modules/allonet.include.allonet.jobs.html",
    "relUrl": "/doc/modules/allonet.include.allonet.jobs.html"
  },"15": {
    "doc": "allonet.include.allonet.state",
    "title": "allonet.include.allonet.state",
    "content": "allonet.include.allonet.state ============================= *Add a new entity to the state based on a JSON specification of its components.* ",
    "url": "/doc/modules/allonet.include.allonet.state.html",
    "relUrl": "/doc/modules/allonet.include.allonet.state.html"
  },"16": {
    "doc": "allonet.lang.lua.allonet-lua",
    "title": "allonet.lang.lua.allonet-lua",
    "content": "allonet.lang.lua.allonet-lua ============================ *alloclient structure* ",
    "url": "/doc/modules/allonet.lang.lua.allonet-lua.html",
    "relUrl": "/doc/modules/allonet.lang.lua.allonet-lua.html"
  },"17": {
    "doc": "allonet.lang.lua.json",
    "title": "allonet.lang.lua.json",
    "content": "allonet.lang.lua.json ===================== *Encode* ",
    "url": "/doc/modules/allonet.lang.lua.json.html",
    "relUrl": "/doc/modules/allonet.lang.lua.json.html"
  },"18": {
    "doc": "allonet.lang.lua.lua-utils",
    "title": "allonet.lang.lua.lua-utils",
    "content": "allonet.lang.lua.lua-utils ========================== *convenience functions /* assume that table is on the stack top */* ",
    "url": "/doc/modules/allonet.lang.lua.lua-utils.html",
    "relUrl": "/doc/modules/allonet.lang.lua.lua-utils.html"
  },"19": {
    "doc": "allonet.src.asset",
    "title": "allonet.src.asset",
    "content": "allonet.src.asset ================= *The protocol message header of asset protocol* ",
    "url": "/doc/modules/allonet.src.asset.html",
    "relUrl": "/doc/modules/allonet.src.asset.html"
  },"20": {
    "doc": "allonet.src.assetstore",
    "title": "allonet.src.assetstore",
    "content": "allonet.src.assetstore ====================== *Returns missing ranges* ",
    "url": "/doc/modules/allonet.src.assetstore.html",
    "relUrl": "/doc/modules/allonet.src.assetstore.html"
  },"21": {
    "doc": "allonet.src.client.audio",
    "title": "allonet.src.client.audio",
    "content": "allonet.src.client.audio ======================== *Find by track_id, else NULL* ",
    "url": "/doc/modules/allonet.src.client.audio.html",
    "relUrl": "/doc/modules/allonet.src.client.audio.html"
  },"22": {
    "doc": "allonet.src.clientproxy",
    "title": "allonet.src.clientproxy",
    "content": "allonet.src.clientproxy ======================= *This file proxies the network client to its own thread.* Terminology: - Proxy: The object that runs on the calling thread, probably app's main thread. - Bridge: The object that runs on the internal network thread. - ProxyClient: Externally responds to the client.h API, but just sends messages over to the bridge thread. - BridgeClient: Uses the client.c implementation to actually perform the requested actions. ",
    "url": "/doc/modules/allonet.src.clientproxy.html",
    "relUrl": "/doc/modules/allonet.src.clientproxy.html"
  },"23": {
    "doc": "allonet.src.delta",
    "title": "allonet.src.delta",
    "content": "allonet.src.delta ================= *Add a new state to the history.* You relinquish ownership and may only use it until the next call of allo_delta_* (and you sould definitely not modify it). ",
    "url": "/doc/modules/allonet.src.delta.html",
    "relUrl": "/doc/modules/allonet.src.delta.html"
  },"24": {
    "doc": "allonet.src.server",
    "title": "allonet.src.server",
    "content": "allonet.src.server ================== *map from asset_id to list of client peers* ",
    "url": "/doc/modules/allonet.src.server.html",
    "relUrl": "/doc/modules/allonet.src.server.html"
  },"25": {
    "doc": "allonet.test.assetstore_test",
    "title": "allonet.test.assetstore_test",
    "content": "allonet.test.assetstore_test ============================ *Private assetstore.c declares* ",
    "url": "/doc/modules/allonet.test.assetstore_test.html",
    "relUrl": "/doc/modules/allonet.test.assetstore_test.html"
  },"26": {
    "doc": "alloui.lua.alloui.json",
    "title": "alloui.lua.alloui.json",
    "content": "alloui.lua.alloui.json ====================== *Encode* ",
    "url": "/doc/modules/alloui.lua.alloui.json.html",
    "relUrl": "/doc/modules/alloui.lua.alloui.json.html"
  },"27": {
    "doc": "Alloverse License",
    "title": "Alloverse License",
    "content": "# {{ page.title }} ### BSD 2-Clause License Copyright (c) 2018, Nevyn Bengtsson All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "url": "/community/alloverse-license.html",
    "relUrl": "/community/alloverse-license.html"
  },"28": {
    "doc": "Animating Views",
    "title": "Animating Views",
    "content": "# {{ page.title }} Coming soon {: .label .label-yellow } ",
    "url": "/concepts/animating-views",
    "relUrl": "/concepts/animating-views"
  },"29": {
    "doc": "Alloverse Architecture",
    "title": "Alloverse Architecture",
    "content": "# {{ page.title }} This document explains the various concepts. For exact protocol specifications, see the [Protocol Reference](/protocol-reference). ## Basic premises - Your \"place\" is where you decorate, run apps, invite people, and hang out. It's like a collaborative X11 server: It runs a world simulation server, a voip gateway, and all the backing data for 3d UIs for the running apps. - A \"visor\" is the GUI application you use to visit places and interact with your apps. - An \"appliance\" is a process running on your computer, or on a computer on the Internet. Like opening a web page (or launching a remote X11 process), this app can then show its interface and be interacted with inside your place. A place, a user/visor and appliances are all actors using the same network protocol and RPC mechanics, implemented in the `allonet` library. ![allonet](/assets/images/allonet.png) Streams: - The \"state stream\" sends the place's representation once every server heartbeat. Right now, it sends the entire state, but the plan is to send only a diff from the last-acknowledged-state for each client. It's a JSON object of Entities and their properties. - The \"intent stream\" sends the client or appliance's movement intents and related data on every heartbeat. It's a JSON object with relative movement intents and absolute orientation requests; details on controller position, orientation and state; and an ack of the last successfully received state. - Interactions are JSON lists, with a sender entity and receiver entity. - Asset distribution - Media streams are unreliable data streams, e g audio (for voice chat), video/textures (screen sharing etc) and geometry (for advanced appliance representations). Allonet multiplexes these over UDP using `enet`. The plan is to wrap this in TLS. An alternative plan has been to use WebRTC as the transport for free TLS, ICE, udp punch-through, etc. We might still do that in the future, if a nice open source library appears. ## Entities and the place state Entities are things in the world, represented in a scene graph. An entity has only an \"id\" and a list of components. There is a [list of specifications for official components](/protocol-reference/official-components). Apps may invent additional components without them having to be part of the standard. ## Interactions and access control Interactions are the way entities can communicate, including how the visor talks to the place itself (by sending to entity id `place`). It's a json list for now, and the idea is for it to be a pub-sub request-response protocol vaguley inspired by [Peter J Robinson et al's Pedro protocol](http://www.doc.ic.ac.uk/~klc/pedro.pdf). The documentation has a [list of specifications for official interactions](/protocol-reference/interactions), but again, apps and visors can invent their own beyond the specification. The alloplace server becomes the Pedro gateway, and can thus manage access control lists, defined as guard expressions on the expression itself, the sender and the receiver. See [the implementation task](https://github.com/alloverse/alloplace/issues/2) for more information. These ACLs can then control everything needed: - An ACL on the \"announce\" packet allows place owners to restrict access to specific users - An ACL on the \"spawn\" packet allows place owners to permit only specific users and appliances to manifest in the place - An ACL on the \"acl-modify\" packet allows place owners to restrict access to the ACL itself to moderators/owners only. This should be exposed in the visor as much more user friendly than the bullet list above makes it seem... ## The three components ### Alloplace The alloplace server holds all the state and takes care of all the logic. It is the world state, RPC and media transit hub. - runs a game loop, with physics simulation, intent interpretation, etc. - pulses diffs to any actors that want it (primarily visors), - is RPC router between actors (place, visors and apps), including appapp - does ACL permission checks on all RPC - simulates the physical bodies in the place - Manages at least one physical+visual body for each actor, - Allows actors to create additional entities ### Visor I'd love to support different visors: VR, AR desktop 3D and touch. For now, the focus is on the VR visor in Lovr. `alloplace://(enet endpoint)...` URLs can be opened to make a visor open a place ([when that's implemented](https://github.com/alloverse/allovisor/issues/1)). A visor should provide some sort of client identity. The idea for now is for each client to provide a public certificate with a name bound to it, so you can at least know when the same client appears again. Would love an architecture idea for a distributed identity plan (web of trust?). If we end up going with webrtc, the enet endpoint should be replaced with a https endpoint that takes a `POST` of the SDP for an `OFFER`, and responds with the `ANSWER`. ### Appliances Appliances are written in any language and interact with the `allonet` library acting as a \"UIKit\" for XR UI. ![alloui](/assets/images/alloui.png) While appliances can use the allonet API directly, it uses low-level primitives that are not great for building 3D UIs. The plan is to create an \"Allo UI\" UI kit API on top of allonet that spawns entities, shares textures etc as necessary to provide the [UX and UI interactions that Alloverse standardizes on](writing-apps-with-alloUI), providing an intuitive and uniform experience across appliances without every application developer having to think of their own interaction patterns. If a user opens an `alloapp+http(s)://...`, it should be opened by the visor. The visor should then send an interaction to the alloplace server, asking it to spawn the given appliance. The alloplace server should then make the http(s) call to the given URL with a connection instruction json blob: { \"spawnInPlace\": \"alloplace://hostname:port\", \"onBehalfOf\": (client identity), \"query\": (query params as-is from the alloapp url) }. The http server receiving this request should then spawn a process for this agent and have it connect to the `spawnInPlace` URL. See [the implementation task for opening appliances with URLs](https://github.com/alloverse/alloplace/issues/8). The plan is to provide a generic \"alloapp gateway\" node script that responds to requests like the one above which can be easily configured to spawn a process like the above, so that all an app developer needs to implement is a process that takes a place URL in ENV (or the whole json as above), and then asks the allonet API to connect to that URL. ## Assets Entities should have components representing assets such as: - mesh/model - textures - animations - static sounds They should reference these assets by sha1 hash. When a alloplace server sees a new hash in the description of an entity coming from an agent, it should ask that agent for that asset hash over the asset channel. The agent should then stream the asset to the server for caching and redelivery. When another agent then sees the references to the assets, it can thus then ask the alloplace for the corresponding asset, so that it can then later display it. Dynamic textures and audio will later be represented as webrtc streams, and thus not considered assets the same way. Placeserv then acts as an SFU. ",
    "url": "/concepts/architecture",
    "relUrl": "/concepts/architecture"
  },"30": {
    "doc": "Asset Protocol",
    "title": "Asset Protocol",
    "content": "# {{ page.title }} Assets are delivered between agents by using the placeserv as a distribution center. Channel 2 `CHANNEL_ASSETS` is used to deliver reliable messages in any direction. Messages can be requests, responses, informational or raw asset data. \"Assets\" in this context means static, unchanging data used by clients or other agents, such as textures, 3d models, sound files, etc. Basically, anything that would be distributed as resource files in an app or a game. There are no provisions for editing files, or keeping track of changes. While the asset system could be used to distribute arbitrary file systems; editing, listing and change notifications would have to be implemented as interactions. ## Identity Assets are always identified with the format: `asset:sha256:>` The hex digits are the sha-2 256 bit hash of the full file contents of the asset itself. This means that you can't have different versions of the same asset on different clients, because then they are in effect different assets. No filename, mime type or any other metadata is provided in the identifier. If this turns out to be essential, we could add it as additional fields, separating fields with colons. ## Distribution In general, the distribution protocol uses \"pull\" semantics from agents that need data. When an agent requests an asset from placeserv, it will first try to serve it from cache to the requesting agent. If none is found, it broadcasts a request to all connected agents to find who has it. Placeserv then retrieves the asset to placeserv's cache, and then serves the asset back to the requesting agent. The requesting agent might already have a good idea about who has the asset, and MAY include an entity id as a hint to which client SHOULD be asked first (whereafter it MUST ask all other agents to see if they have it). In addition, if an agent has an asset that it thinks is very likely to be needed soon, it MAY push that asset immediately to the placeserv to be stored in the cache. Once an asset is received, it MUST be checked against the hash in its identifier to verify its integrity, and discard it if the hash does not match. ## Caching Placeserv MUST function even completely without a cache. In the case of an asset response which doesn't fit on disk, or an asset response which indicates not cacheable, placeserv must stream this asset directly to the requesting agent, keeping just enough of it in RAM to do so, whereafter it can remove the asset from memory. ## Wire protocol On the wire, messages are: 1. `mid`, a 16-bit unsigned big-endian integer message type code. 2. `hlen`, a 16-bit unsigned big-endian integer header length value. 3. `header`, a utf8 json body of `hlen` bytes. 4. `message`, a raw bytestream of bytes, directly appended after `hlen` bytes of json and until the end of the packet. ### C>S>C Asset request Ask for an asset. The message can be: - agent to placeserv: Ask the place for an asset, in which case it will either respond with it from cache; or ask other agents for the asset and then forward it on. - placeserv to agent: Placeserv has been asked by another agent for an asset, and is now forwarding that request. ``` >>{ \"id\": \">\", \"range\": [start_byte_offset, number_of_bytes], \"published_by\": \">\" // optional } ``` - `id` is the ID of the asset - `range` is the byte range you want. Send `[0, 0]` for a head request. - `published_by` is the entity ID whose owner is likely to own the asset. This is an optional field and only used as a hint. Placeserv should ask this agent first, before asking other agents. ### C>S>C Asset response, transmission header If the receiver has the asset requested, it may respond affirmative with the metadata of the asset in a \"transmission header\" packet. It will then commence sending \"transmission chunks\". An agent can start sending this to a placeserv (or placeserv to an agent) unprompted in case it wishes to warm up the receiver's cache. Once we receive `start_byte_offset + number_of_bytes == total_length` the full asset has been received. The receiver should start confirming the hash of the asset before finally storing it in its cache and forwarding it to the application layer. ``` >>{ \"id\": \">\", \"range\": [start_byte_offset, number_of_bytes], \"total_length\": >, }> ``` ### C>S>C Asset response, failure header Sent in place of `mid:2` in case the receiver is unable to satisfy the request (e g it doesn't have the asset). ``` >>{ \"id\": \">\", \"error_reason\": \">\", \"error_code\": \">\", } ``` ",
    "url": "/protocol-reference/asset-protocols",
    "relUrl": "/protocol-reference/asset-protocols"
  },"31": {
    "doc": "Assets",
    "title": "Assets",
    "content": "# {{ page.title }} Coming soon {: .label .label-yellow } ",
    "url": "/concepts/assets",
    "relUrl": "/concepts/assets"
  },"32": {
    "doc": "Code of Conduct",
    "title": "Code of Conduct",
    "content": "# {{ page.title }} ## Contributor Covenant Code of Conduct ### Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. ### Our Standards Examples of behavior that contributes to creating a positive environment include: - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Gracefully accepting constructive criticism - Focusing on what is best for the community - Showing empathy towards other community members Examples of unacceptable behavior by participants include: - The use of sexualized language or imagery and unwelcome sexual attention or advances - Trolling, insulting/derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information, such as a physical or electronic address, without explicit permission - Other conduct which could reasonably be considered inappropriate in a professional setting ### Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. ### Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. ### Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at nevyn@alloverse.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. ### Attribution This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html [homepage]: https://www.contributor-covenant.org For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq ",
    "url": "/community/code-of-conduct.html",
    "relUrl": "/community/code-of-conduct.html"
  },"33": {
    "doc": "Official Components",
    "title": "Official Components",
    "content": "# {{ page.title }} For an overview of what a component is, please see [Terminology](/protocol-reference). These interactions are defined by alloserv. Third party developers may create any components they want. They can vote to make their own components official by opening an issue on this repo. ## `transform` Defines the physical location and orientation of the entity relative to its parent entity if it has one; otherwise relative to the world origo. See [Coordinate System](coordinate-system) for an extended description of how things are positioned and oriented in Alloverse. ``` \"transform\": { \"matrix\": [1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0] } ``` _note: In an early version of the protocol, transform was represented as a 3-element position vector and 3-element rotation vector with euler angle rotations._ ## `geometry` Defines the visual geometry of an entity. This should use assets in the future, but until we have assets, geometry is encoded in-line in entity description. **If type is `asset`**, you are providing an asset identifier that is a hash of the contents of the asset. You also need to implement the client asset callbacks in order to respond to asset requests in order to deliver the asset. ``` \"geometry\": { \"type\": \"asset\", \"name\": \"asset:sha256:d2a84f4b8b650937ec8f73cd8be2c74add5a911ba64df27458ed8229da804a26\" } ``` **If type is `hardcoded-model`**, you're using one of the models hard-coded into the visor. `name` is the name of the model. ``` \"geometry\": { \"type\": \"hardcoded-model\", \"name\": \"hand\" } ``` **If type is `inline`**, Well.. you're living in the past This is only recommended for debugging, and until we have geometry assets. - `vertices` is a required list of lists, each sub-list containing x, y, z coordinates for your vertices. - `normals` is an optional list of lists, each sub-list containing the x, y, z coords for the normal at the corresponding vertex. - `uvs` is an optional list of lists, each sub-list containing the u, v texture coordinates at the corresponding vertex. - `triangles` is a required list of lists. Each sub-list is three integers, which are indices into the above arrays, forming a triangle. ``` \"geometry\": { \"type\": \"inline\", \"vertices\": [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0], [4.0, 4.0, 4.0]], \"normals\": [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0], [4.0, 4.0, 4.0]], \"uvs\": [[0.0, 0.0], [0.5, 1.0], [1.0, 0.0], [1.0, 1.0]], \"triangles\": [[0, 1, 2], [1, 2, 3]] } ``` `geometry` used to also contain `texture`, but that's been moved to `material.texture`. ## `material` Defines the surface appearance of the component being rendered. ``` \"material\": { \"color\": [1.0, 1.0, 0.0, 1.0], \"shader_name\": \"plain\", \"texture\": \"asset:sha256:d2a84f4b8b650937ec8f73cd8be2c74add5a911ba64df27458ed8229da804a26\" } ``` - `color`: An array of R, G, B and A value to set as base color for the thing being rendered. Default is white. - `shader_name`: Optional ame of hard-coded shader to use for this object. Currently allows `plain` and `pbr`. Default is `plain`. - `texture`: optional texture asset. Default is none. ## `text` Defines a text renderer for this entity, drawing a text texture at `transform`. ``` \"text\": { \"string\": \"hello world\", \"height\": 0.03, \"wrap\": 0, \"halign\": \"center\" } ``` - `height`: The height of the text. 1 unit = 1 meter. - `wrap`: The width in meters at which to wrap the text, if at all. - `halign`: Horizontal alignment; \"center\", \"left\" or \"right\". ## `collider` Defines the physical shape of an entity. ``` \"collider\": { \"type\": \"box\", \"width\": 1, \"height\": 1, \"depth\": 1 } ``` ## `relationships` Specify the relationships between entities, in particular child entites' \"parent\" entity. If an entity has a parent, its transform should be concatenated with all its ancestors' transforms before being displayed. ``` \"relationships\": { \"parent\": \"abc123\" } ``` ## `intent` Specify how the entity's owning agent's intent affects this entity. - `actuate_pose`: this named pose will be set as this entity's transform each frame. - `from_avatar` (optional): Instead of following the owning agent's intents, follow the agent who has this entity as its avatar. ``` \"intent\": { \"actuate_pose\": \"hand/left\", \"from_avatar\": \"abc123\" } ``` ## `grabbable` Describes how an entity maybe grabbed/held, and then moved/dragged by a user. The actual grabbing is accomplished using intents. See the field `grab` under [intent](intent). ``` \"grabbable\": { \"actuate_on\": \"...\", \"translation_constraint\": [1, 1, 1], \"rotation_constraint\": [1, 1, 1], } ``` - **`actuate_on`**: Since the `grabbable` component is likely attached to a a handle rather than the entire object being movable, actuate_on indicates how far up this entity's ancestry to walk before deciding which entity to actually move. - Omitting this key indicates the entity itself should be moved within its local coordinate space. - Literal `$parent` means move the parent entity - Any entity ID must be an ancestor of this entity, and indicates exactly which entity to move. - **`translation_constraint`**: Only allow the indicated fraction of movement in the corresponding axis in the actuated entity's local coordinate space. E g, to only allow movement along the floor (no lifting), set the y fraction to 0: `\"translation_constraint\": [1, 0, 1]\". - **`rotation_constraint`**: Similarly, constrain rotation to the given fraction in the given euler axis in the actuated entity's local coordinate space. E g, to only allow rotation along Y (so that it always stays up-right), use: `\"rotation_constraint\": [0, 1, 0]`. ## `live-media` The entity that holds a `live-media` component for a specific track is the entity that \"plays\" that track; e g for audio, audio will be played from the location of that entity. Please do not try to create live-media components manually. They must be allocated server-side so that the server can allocate a track stream in the network protocol. Instead, send [allocate_track](interactions#entity-wishes-to-transmit-live-media) to `place` to add a `live-media` component to your entity. - `track_id`: `CHANNEL_MEDIA` track number that corresponds to what this entity should play back - `sample_rate`: For audio: playback sample rate, as sent in `allocate_track` - `channel_count`: For audio: only 1 mono channel supported - `format`: Only \"opus\" audio supported ``` \"live_media\": { \"track_id\": 0, // filled in by server \"sample_rate\": 48000, // \"channel_count\": 1, \"format\": \"opus\" } ``` ## `clock` Only set on the entity `place`, this component defines the flow of time for a place. ``` \"clock\": { \"time\": 123.0, // in seconds } ``` Its reference time is undefined. It is always seconds as a double. ## `cursor` Defines a custom cursor renderer, controlling the appearence of the cursor displayed when pointing at the entity. ``` \"cursor\": { \"name\": \"brushCursor\", \"size\": 3, } ``` - `name`: The name of the custom cursor. There's currently only one defined; \"brushCursor\", which displays a white circle. - `size`: The brushCursor's radius, meant to match the size of the current brush size when interacting with a drawable surface. 1 unit = 1 centimeter. Default: \"3\". ",
    "url": "/protocol-reference/official-components",
    "relUrl": "/protocol-reference/official-components"
  },"34": {
    "doc": "Contributing to Alloverse",
    "title": "Contributing to Alloverse",
    "content": "# {{ page.title }} ## Development environment ### Alloplace server This is an Elixir process that acts very similarly to a dedicated game server. You run it, and it acts as a container/world simulator for all users and apps that connect to it. There is an always-on development server at [alloplace://nevyn.places.alloverse.com](alloplace://nevyn.places.alloverse.com). You can use it to try out your code so you don't have to run a server locally if all you're interested in is client development. If you DO want to do server development, see the [setup instructions in alloplace's README](https://github.com/alloverse/alloplace#setup) for setup and run instructions. Once it's running, you have a server on [alloplace://localhost](alloplace://localhost)! ### Allovisor client This is the \"game client\" that connects to the alloplace server. [See its build instructions in its README](https://github.com/alloverse/allovisor#compiling-and-developing-allovisor) It uses CI integration to get the latest version of \"allonet\", the network library used to talk to the Alloverse. It's all in the README how you set that up. ### Appliances See the [appliance dev guide](writing-apps). ### Allonet Allonet is the network layer. Unless you're doing deep protocol hacking, you shouldn't need to mess with it. It's built into allovisor and alloplace, and should work as-is. If you want to hack on it... Allonet is written in C and CMake. I recommend using Visual Studio Code, and installing the \"CMake-Tools\" package to build and run from the GUI. You can then either run `./build/allodummyclient` to try things out. If you want to try it in the real Allovisor, copy `liballonet.dylib` into the Unity project's assets, something like this: cp build/liballonet.dylib ../allovisor/Assets/liballonet.bundle ",
    "url": "/community/contributing",
    "relUrl": "/community/contributing"
  },"35": {
    "doc": "Coordinate System",
    "title": "Coordinate System",
    "content": "# {{ page.title }} The coordinate system in Alloverse has the following properties: 1. One unit is 1 meter 2. Coordinate system is [right-handed](https://www.evl.uic.edu/ralph/508S98/coordinates.html). This implies... 3. Negative X is left/west, positive X is right/east. 4. Negative Y is down, positive Y is up. 5. Negative Z is forward/north, positive Z is back/south. 6. Positive rotation is counterclockwise about the axis of rotation. 7. Rotations are always represented in radians. 8. Y=0 is floor level in model space 9. The neutral pose of all models, avatars, app UIs etc should should face towards positive Z, with \"right\" being positive X and \"up\" being positive Y. 10. For textures, UV 0,0 is bottom-left, with positive U towards the right, and positive V upwards. 11. The origin of an entity should be in its middle. ![Rotation about Y axis is counterclockwise](/assets/images/coordinate-system-XYZ.png) ## Representation Transforms are always represented using a 16-element transformation matrix. Such a 4x4 matrix is represented in data models with a column-major 16-element list of numbers. ",
    "url": "/protocol-reference/coordinate-system",
    "relUrl": "/protocol-reference/coordinate-system"
  },"36": {
    "doc": "Identity",
    "title": "Identity",
    "content": "# {{ page.title }} Identity hasn't been completely fleshed out yet, but here's the general gist: - Alloverse is decentralized, so there is no central identity authority. - When a Visor is started for the first time, it generates a private+public key pair. The user is also prompted to fill in \"profile data\" such as name, email, profile picture, choice of avatar, etc. - Public key + profile data = \"Alloverse Passport\" - Visors can transfer passports to other visors over Bluetooth or Wifi. E g, if the user starts out on a Mac and later get a Quest, when they start the Quest app they're prompted to either create a passport or transfer one over. If they choose to transfer, the Mac app and Quest app will communicate and show UI to confirm the transfer on both sides. - Visors with the same Passport communicate to connect to the same place, and they control the same avatar, so that it's easy to switch between platforms and level of immersion. - Agents can identify each other using Diffie Hellman key exchange. - This means that an app \"logs in\" the users that are in the room by exchanging keys with them, and there's no need to type in any usernames or passwords. Apps automatically know who is in the room and can customize its contents based on that. - Users also identify themselves to each other, so that you can know that the person you talked to yesterday is the same person you are talking to today. This also lets you build a contact list. - Key exchange is done through Interactions that can be blocked on a Place level or at a Visor level, so that people who don't wish to be identified to other people or apps without authorizing it, won't be. - To back up your Passport, you can link it to your my.alloverse.com account, or another web service. ",
    "url": "/protocol-reference/identity",
    "relUrl": "/protocol-reference/identity"
  },"37": {
    "doc": "3D Human Interface Guidelines",
    "title": "3D Human Interface Guidelines",
    "content": "# {{ page.title }} XR is currently the wild west when it comes to interaction patterns. We're all learning what UX works in three dimensions, with different input devices and layouts. In the Alloverse, a multitude of apps are to coexist in shared spaces. Thus, interacting with one app should be similar to how you interact with another app, instead of each app designing their own interaction patterns; otherwise it will be a too fragmented and confusing experience that decreases productivity and enjoyment rather than increasing it. This document thus collects interaction guidelines, so that apps can behave in a straightforward, consistent and fun manner. It's very much a work in progress. If you are an interaction designer, we would love your help in designing this document. _TODO: each section should have instructionals for dual-stick, single-stick and hands._ ## Moving From the rule under \"interactive\", VR movement in the Alloverse doesn't use teleportation. Instead, movement happens with a static camera and an out-of-body experience. Hold down the A button, and use the dual sticks to move (left stick) and rotate (right stick). As you hold A, the camera stays in place while your avatar moves out in front of the camera, When you release A, the camera snaps into the head location of the avatar. ## Expressiveness Since the sticks are not dedicated to movement by default, they can be used for character expressiveness and interaction. ## Grabbing Direct manipulation is the most intuitive way to interact with a computer. You should: - touch, - grab, and - and drag things. You should avoid: - modal interactions, where you have to enter and exit modes to perform common actions. - indirection, where e g pushing a button to perform an action on an object away from the button, where you could have grabbed or pushed the original thing instead ## Pointing Point gesture Pointing at an entity reveals its widgets, which allow you to: - See who it is owned by - Ask its parent app to close ### Poking Entities are informed when they are pointed at, and can react to it. The user can also push the trigger button to \"poke\" the entity at the pointed location. This is how you would push buttons, ## Interactive In real life, any change between two states has some sort of transition. Nothing pops into existence in front of us unannounced; nothing disappears suddenly into nothingness. Your interface should be the same: every change should have a clear transition from its original state. This allows the user's mind to understand what is happening, and build a mental model of the interaction. Don't teleport; move. Don't swap meshes or textures; animate and transition. ## Interface elements ### Lists and scrolling Grabbable widget for scrolling ### Buttons Responds to poke ### Windows ",
    "url": "/hig",
    "relUrl": "/hig"
  },"38": {
    "doc": "Examples",
    "title": "Examples",
    "content": "# {{ page.title }} Incomplete {: .label .label-yellow } ",
    "url": "/examples",
    "relUrl": "/examples"
  },"39": {
    "doc": "Index",
    "title": "Index",
    "content": "- [allonet.include.allonet.assetstore](modules/allonet.include.allonet.assetstore.html) - [allonet.include.allonet.client](modules/allonet.include.allonet.client.html) - [allonet.include.allonet.jobs](modules/allonet.include.allonet.jobs.html) - [allonet.include.allonet.state](modules/allonet.include.allonet.state.html) - [allonet.lang.lua.allonet-lua](modules/allonet.lang.lua.allonet-lua.html) - [allonet.lang.lua.json](modules/allonet.lang.lua.json.html) - [allonet.lang.lua.lua-utils](modules/allonet.lang.lua.lua-utils.html) - [allonet.src.asset](modules/allonet.src.asset.html) - [allonet.src.asset](modules/allonet.src.asset.html) - [allonet.src.assetstore](modules/allonet.src.assetstore.html) - [allonet.src.client.audio](modules/allonet.src.client.audio.html) - [allonet.src.clientproxy](modules/allonet.src.clientproxy.html) - [allonet.src.delta](modules/allonet.src.delta.html) - [allonet.src.server](modules/allonet.src.server.html) - [allonet.test.assetstore_test](modules/allonet.test.assetstore_test.html) - [Asset](classes/Asset.html) ## Methods - Asset:_init (data) - Asset:read (offset, length) - Asset:write (data, offset, totalSize) - Asset:size () - Asset:id (refresh) - [AssetManager](classes/AssetManager.html) - [AssetView](classes/AssetView.html) - [Base64Asset](classes/Base64Asset.html) - [FileAsset](classes/FileAsset.html) - [alloui.lua.alloui.json](modules/alloui.lua.alloui.json.html) - [Button](classes/Button.html) - [GrabHandle](classes/GrabHandle.html) - [Label](classes/Label.html) ## Methods - Label:_init (o) - [Speaker](classes/Speaker.html) - [Surface](classes/Surface.html) - [TextField](classes/TextField.html) ## Methods - TextField:_init (o) - [View](classes/View.html) ## Methods - View:specification () - View:updateComponents (changes) - View:onInteraction (inter, body, sender) ",
    "url": "/doc/",
    "relUrl": "/doc/"
  },"40": {
    "doc": "Modules",
    "title": "Modules",
    "content": "# {{ page.title }} Incomplete {: .label .label-yellow } ",
    "url": "/modules/",
    "relUrl": "/modules/"
  },"41": {
    "doc": "Classes",
    "title": "Classes",
    "content": "# {{ page.title }} Incomplete {: .label .label-yellow } ",
    "url": "/classes/",
    "relUrl": "/classes/"
  },"42": {
    "doc": "Concepts",
    "title": "Concepts",
    "content": "# {{ page.title }} Incomplete {: .label .label-yellow } ",
    "url": "/concepts",
    "relUrl": "/concepts"
  },"43": {
    "doc": "Community",
    "title": "Community",
    "content": "# {{ page.title }} Incomplete {: .label .label-yellow } ",
    "url": "/community",
    "relUrl": "/community"
  },"44": {
    "doc": "Protocol Reference",
    "title": "Protocol Reference",
    "content": "# {{ page.title }} # Terminology Please begin by reading the [architecture documentation](../architecture), as it explains how all these components fit together. To see how these messages actually sent over the network, see [Wire protocol](wire-protocol.md). This document also specifies the differences between the specification and the current implementation. ## Agent An agent is code that can spawn entities, and communicates to a place on behalf of the entities it owns. Thus, all these are agents: - The place itself (referenced in requests with \"place\" magic entity id) - any visor (represented as the allonet connection to the place) - any app (also represented as its allonet connection) Every connected agent has to spawn its \"avatar\" entity as part of its `ANNOUNCE` message, so that it has a representation in a place and can be communicated with (or terminated, in the case of apps). When an agent disconnects from a place, all its entities are removed from the place. ## Agent identity An agent's `ANNOUNCE` message contains its identity: display name, profile URL, and a certificate/public key that can be used to identify the same user/app across connections and places without a central identity authority server. Identity is currently expressed as the following JSON blob: ``` { \"display_name\": \"annie\" } ``` ## Entity An entity is the manifestation of an agent in a place. The only fixed information in an entity is its `id`. Everything else is specified as a set of components. JSON specification: ``` { \"id\": \"1234\", \"components\": { \"transform\": // every component has a string key { // and an object value // the keys and values should be consistent with // with the specification for that key. See \"Component\" } } } ``` ## Component A component describes an aspect of an entity, such as: - `transform`: its position, rotation and size - `mesh`: description of its physical geometry - etc... Alloverse defines **a set of [official component specifications](official-components)**. App developers are free to invent their own components, which is useful for app-to-app communication (though a standard Visor will not be able to interpret them). ## Intent The \"intent\" blob is used every heart-beat to indicate how the agent intends that its avatar (and other owned entities) should move and behave in real-time this frame. It only covers basic movement: more complex behavior is covered by \"interactions\". It's sent over the unreliable channel, so it should be repeated every frame as long as it's relevant. The blob is also used to send housekeeping information such as acknowledging receipt of state diffs. See [intent](intent). ## Interaction An on-demand message either announcing information, or requesting something from one entity to another (sent by the requesting entity's agent, and handled by the receiving entity's agent). Alloverse defines **a set of [official interactions](interactions)**. App developers are free to invent their own interactions, which is useful for app-to-app communication (though a standard Visor will not be able to interpret them). # Types of communication ## Entity intent Agent to place per-frame message. See [intent](intent). ## Entity to entity interaction (request/response/pubsub) Sent from agent, to place, then forwarded to the designated agent, over the reliable channel on demand. ``` [ \"interaction\", \"{oneway|request|response|publication}\" \"{source entity ID}\", \"{destination entity ID or emptystring if publication}\", \"{request ID or empty string if single-way}\", // interaction body goes here ] ``` The agent sending the request must own the source entity. ### Requests and responses If the second field is set to \"request\" and a request ID is set, the recipient can respond to the interaction by setting \"response\" and filling in the same request ID, and the alloplace server will route the message correctly. A response must be sent to the entity that sent the request. Sending a response to a an entity that didn't request it may lead to force disconnection. The client sets its own request IDs. These must be unique for each request this session for this agent. An UUID or monotonically increasing integer as string should do. ### Publication and subscription If the second field is \"publication\" and no destination entity is filled in, it's a publication that anyone can subscribe to. This is useful for apps to broadcast information that is instantaneous rather than a property of an entity (in which case it would have been a property of a component of an entity). Agents can subscribe to publications by providing a \"match pattern\" which is an Elixir guard expression. This lets agents set very fine grained subscriptions to exactly what interactions it wants to receive. If nobody is subscribing to a matching pattern of the given publication, the message is filtered out by the alloplace server. Behavior is undefined if you provide a request id in a publication. Future versions may allow publications to have responses. ### Oneway The message is directed to a single entity/client, and you can't respond to it. `request_id` should be empty. ### Access control Access control is defined on the interaction level. The alloplace server can be fed with Elixir guard expressions the same way that subscriptions work, and an \"allow\" or \"deny\" flag, which then becomes the \"Access Control List\" (ACL) for interactions in the place. Since announce is an interaction, an interaction ACL can be used to allow/deny agents from joining a place. Likewise, since changing the ACL is also an interaction, you can use an ACL to control who may modify the ACL. In other words, anything except intents and place state updates can be filtered using interaction ACLs. Interaction ACLs guard on the entire interaction message, and not just the payload body. So for example, the following rule would disallow users named \"harry\" from joining a room: ``` [ \"deny\", \"\"\"[ \"interaction\", // match exactly on provided value for first field \"request\", SourceEntity, // bare words become variables \"place\", _, // underscore means unused variable = ignored value [ \"announce\", [\"identity\", Identity], _ ] ] where Identity[\"name\"] == \"harry\" \"\"\" ] ``` Note that the rule itself is an Elixir string, not a JSON expression. If an interaction is sent by an agent but is disallowed by an ACL rule, the following message is sent in response: ``` [ \"interaction_denied\", // original interaction goes here, // rule that caused denial goes here ] ``` ## Place to agent state update Sent every heart-beat on the unreliable channel 0 to let agents know what the world looks like. See [State Diffs](state-diffs) for full format and explanation, and [Entity](#entity) to understand the things the state contains. # Official components Please see the [list of official components](official-components) in a separate document. These are defined by alloplace, and define how an agent and entity interact with a place. # Official interactions Please see the [list of official interactions](interactions) in a separate document. These are defined by alloplace, and define how an agent and entity interact with a place. # HTTP Endpoints ## Alloapp Gateway HTTP service that takes a connection request, repackages as env vars, and boots the requested process. Node express. - `ALLOVERSE_PLACE_URL` - `ALLOVERSE_REQUESTER_IDENTITY` - `ALLOVERSE_URL_PARAMS` ",
    "url": "/protocol-reference",
    "relUrl": "/protocol-reference"
  },"45": {
    "doc": "Get Started",
    "title": "Get Started",
    "content": "# {{ page.title }} Alloverse is an open platform for collaborative workspaces in 3D. It’s Gibson style Cyberspace, but for your day-to-day work and play, with your friends and colleagues. It’s a VR and AR platform for creating spaces, and for running real applications within those spaces, together with other people. Please see the public website for more information. In nerd terms, it's a VR/AR/3D \"window manager\" and collaborative workspace. Your \"place\" is where you decorate, run apps, invite people, and hang out. It's like a collaborative X11 server: It runs a world simulation server, a voip gateway, and all the backing data for 3d UIs for the running apps. The reference Elixir implementation is in alloplace. A \"visor\" is the GUI application you use to visit places and interact with your apps. allovisor implements such a visor for VR in Unity. An \"appliance\" is a process running on your computer, or on a computer on the Internet. Like opening a web page (or launching a remote X11 process), this app can then show its interface and be interacted with inside your place. The network and \"UI protocol\" is abstracted into the allonet library, written in C and used by all the above projects. ## Developing an Alloverse App An Alloverse app is a server-side app that you run on your own server, similarly to how you would host a web app on your own server. The difference is, when a user goes to your app on the web, it loads into that user’s web browser on their computer; but when a user goes to your alloapp in an Alloverse Place, the app loads into the Place for all users in that Place to use, and your code gets collaboration and VR super-powers for free. This tutorial will take you through creating an Alloverse app using the Lua programming language, since that is the language we’ve developed the most support for so far. You can build apps on Mac, Linux or Windows; but for the latter, you’ll need a Unix shell, e g mingw, msys2 or WSL. In contrast to a web framework like Rails or Django, Alloverse doesn’t install any software onto your system. Instead, a project is completely self-contained within its project folder, and contains everything it needs to run. ## Creating your project First, create a project folder. Allo Assist requires Git to fetch all its dependencies, so we’ll init a Git repo in the folder. Then we can initialize the alloapp environment into it, and make sure it works: {% highlight terminal %} $ mkdir allo-todo $ cd allo-todo $ git init $ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/alloverse/alloapp-assist/master/setup.bash)\" $ ./allo/assist help {% endhighlight %} (This is also a good time to `git commit -a`, so the next commit only contains your own changes.) The curl’d script will have created this project structure for you: - `lua` contains the Lua source code for your app - `lua/main.lua` contains your app! It barely does anything yet. But you can add more code to this file to keep going, and add more files into lua to modularize your code. - `images` contains images you want to use as textures on buttons, etc. - `allo` contains the Alloverse app framework. You should not edit anything in here, as an upgrade of the framework will overwrite your changes. - `allo/assist` is a script that helps you with tasks such as starting a server, installing dependencies, etc… - `allo/libs` contains compiled C dependencies as dynamic libraries and executables. These are `.gitignore`d to save space. If you check out your code on another computer, you can `./allo/assist fetch` to install them again, so you don't need to (and shouldn't) commit them. - `allo/boot.lua` sets up the runtime environment for your app. This code is generated, so it's not recommended to modify this file. ## Trying your app out That’s it! You should now be able to start your project and see it appear in an Alloplace. If you don’t have one already, you can get or rent a Place at [places.alloverse.com](places.alloverse.com/), boot one on your own (`docker run -e ALLOPLACE_NAME=\"my place\" -p 21337:21337/udp -it alloverse/alloplace`), or just use our playground [alloplace://nevyn.places.alloverse.com](alloplace://nevyn.places.alloverse.com/). I'm gonna do the latter: {% highlight terminal %} $ ./allo/assist run alloplace://nevyn.places.alloverse.com {% endhighlight %} If it all checks out, you should be able to jump into that place on your VR headset and press the button it has created. [Download the Visor app for your VR or desktop platform of choice](https://alloverse.com/download/), and then click “Connect”, “Nevyn’s place” (or click the alloplace link of the place you’ve rented or started yourself). ![On the left, the UI of our app shown as a white rectangle with an orange button. On the right, a terminal showing the assist run command that instantiates the app; and the word Hello printed thrice.](/assets/images/hello-world-1024x318.jpg \"Hello world running inside Alloverse\") Our app running in Nevyn’s place. I’ve clicked our simple app’s orange button button three times, and the laws of causality held up, printing \"Hello\" thrice to our terminal. At this point, you could go off, do your own thing, read the documentation as you go. Or you could keep reading, and be guided through the development of a simple but functional todo list app, which will help establish the fundamentals and make it much easier for you to build real, complex apps. This is also a good point at which to remind you: if you get stuck, or have questions or feedback, [please do hop on Discord](https://discord.gg/KhdMU6P6Uw) and give it to us straight. ## Anatomy of Hello World in the Alloverse Let’s open up `lua/main.lua` and have a look at the code, to understand what's going on. If you're not much for theory and you'd rather learn by doing, you can [skip this section and dig directly into making an app](#building-our-app). {% highlight lua %} local client = Client( arg[2], \"allo-todo2\" ) local app = App(client) {% endhighlight %} Above, we're using a [Client](/doc/classes/Client.html) to connect this app to a Place. `arg[2]` is the URL of the place to connect to, which Assist sets up for you in boot.lua. [App](/doc/classes/App.html) then manages the Client connection for you, and manages the lifetime of your app. {% highlight lua %} assets = { quit = ui.Asset.File(\"images/quit.png\"), } app.assetManager:add(assets) {% endhighlight %} Assets are files (images, glb models, videos, sounds, etc...) that you want to use in your app. They need to be published so that user's headsets can download them before you can use them. We make `assets` global so you can use it throughout your app. {% highlight lua %} local mainView = ui.Surface(ui.Bounds(0, 1.2, -2, 1, 0.5, 0.01)) mainView.grabbable = true {% endhighlight %} Your application is represented by a hierarchy of views. If you're a web developer, you can think of it as nested elements in a DOM. If you come from Unity, it's similar to the GameObject hierarchy, with transforms being relative to parent GameObjects. If you're an oldschool Macintosh Toolbox developer, I'm sorry. `app.mainView` is the main UI for your app. You should set it up with your main user interface before connecting to the Place. `Bounds` is the position and size of your object: * The first three numbers are the x, y and z position ([see coordinate space reference](/protocol-reference/coordinate-system)), and in this case they mean this view is centered horizontally; its base is 1.2 meters up from the floor; and -2 means 2 meters into the Place, depth-wise. * The second group of three numbers is the width, depth and height. Here, we're 1 meter wide, half a meter wide, and one centimeter deep. We also make the main view `grabbable`, so the user can move it around the Place. Alternatively, you can add a GrabHandle, which acts like the title bar of a desktop UI's window. {% highlight lua %} local button = ui.Button(ui.Bounds(0.0, 0.05, 0.05, 0.2, 0.2, 0.1)) mainView:addSubview(button) button.onActivated = function() print(\"Hello!\") end {% endhighlight %} The standard template has created a standard Button component for you, at 2 decimeters wide and high. Its position of 5 centimeter down and forward is relative to the `mainView`'s position. The `onActivated` callback lets us run code when the button is pressed. This'll print \"hello\" to your local terminal when you run the app on your machine (even if you're running the visor somewhere else on the Internet!) {% highlight lua %} app.mainView = mainView app:connect() app:run() {% endhighlight %} Finally, the template has configured the app's main view to use this dummy UI. Then, it connects to the Place we've been asked to run in, and then hand over the runtime of the app to the UI framework so it keeps running until the user quits it. Now that we got the gist of how to compose an app like this, we can replace it with something useful. ## Building our app Let's make a todo list app! I'm a master artist, so I've painted this piece of art to represent our goal: ![Todo list app sketch](/assets/images/todo-sketch.jpeg) So we've got: * A list of items to check off, * A button to add an item * A dialog that pops up where you can name your item. Sounds great. Let's get started. Note: This is where we start coding for real. {: .label .label-green } Select everything from `local mainView = ...` down to `app.mainView = mainView` and delete it, and we'll write some new, fun code. Instead of having a bunch of loose views strewn around the code, I enjoy creating a class for each main container of UI. Some equivalent of a \"window\", or \"view controller\", or \"component\" if you will. Let's create a `TodosView`, which will display the list of items, and allow you to quit the app, and add new items. {% highlight lua %} class.TodosView(ui.Surface) function TodosView:_init(bounds) self:super(bounds) self.grabbable = true self.quitButton = self:addSubview(ui.Button(ui.Bounds{ size=ui.Size(0.12,0.12,0.05) })) self.quitButton:setDefaultTexture(assets.quit) self.quitButton.onActivated = function() app:quit() end self.addButton = self:addSubview(ui.Button(ui.Bounds{ size=ui.Size(bounds.size.width*0.8,0.1,0.05) })) self.addButton.label:setText(\"Add todo\") self.addButton.onActivated = function(hand) self:showNewTodoPopup(hand) end self.todoViews = {} self:layout() end {% endhighlight %} We're using [Penlight's `class` macro](https://stevedonovan.github.io/Penlight/api/libraries/pl.class.html) to create classes. We inherit [ui.Surface](/doc/classes/Surface.html), which is like a [ui.View](/doc/classes/View.html) except it also draws a background, so our app gets a backdrop to rest our controls onto. We create a constructor, where we set up initial state and controls. Here we want a quit [Button](/doc/classes/Button.html), and an add [Button](/doc/classes/Button.html). We immediately add them as subviews to the TodosView, so they show up in the view hierarchy. For the first button, we use one of our image assets as a texture, and for the other, we set the text on the label instead. AlloUI doesn't have a comprehensive layout system instead, so we'll call our own `layout` at opportune moments. Let's stub it out so we have something to start with. We'll also create an instance of it, and use it as our app's main view: {% highlight lua %} function TodosView:layout() self.quitButton.bounds:moveToOrigin():move( 0.52,0.25,0.025) self.addButton.bounds:moveToOrigin():move( 0, -0.15,0.025) end app.mainView = TodosView(ui.Bounds(0, 1.2, -2, 1, 0.5, 0.01)) {% endhighlight %} Fire off a quick `./allo/assist run` in your terminal, and you'll be presented with this beauty in VR: ![A white surface with a close button in the top right, and an 'add todo' button along the bottom](/assets/images/todo-progress-1.png) We've created a VR interface, how cool is that! Next up, let's create that popup used for inputting new items. {% highlight lua %} function TodosView:showNewTodoPopup(hand) local popup = ui.Surface(ui.Bounds{size=ui.Size(1,0.5,0.05)}) local input = popup:addSubview(ui.TextField{ bounds= ui.Bounds{size=ui.Size(0.8,0.1,0.05)}:move(0, 0.15, 0.025) }) local done = function() self:addTodo(input.label.text) popup:removeFromSuperview() end input.onReturn = function() done() return false end input:askToFocus(hand) local addButton = popup:addSubview(ui.Button(ui.Bounds{size=ui.Size(popup.bounds.size.width*0.8,0.1,0.05)})) addButton.bounds:move(0, 0, 0.025) addButton.label:setText(\"Add\") addButton.onActivated = done local cancelButton = popup:addSubview(ui.Button(ui.Bounds{size=ui.Size(popup.bounds.size.width*0.8,0.1,0.05)})) cancelButton:setColor({0.4, 0.4, 0.3, 1.0}) cancelButton.bounds:move(0, -0.15, 0.025) cancelButton.label:setText(\"Cancel\") cancelButton.onActivated = function() popup:removeFromSuperview() end app:openPopupNearHand(popup, hand) end {% endhighlight %} Phew, that's a handful. Let's step through it. * `popup` is our new popup window. It's another surface, one meter by a half. * To it, we add a [TextField](/doc/classes/TextField.html)! This is your standard issue text input view. Tapping it will focus it, which will display a virtual keyboard to the user (or if you have a hardware keyboard, you can just use that). * We want to close the popup both when the return key is pressed, and when you manually tap the \"Add\" button, so let's create a callback we can use for both called `done`. * `onReturn` is used to react to return/enter key, and we can also use it to make sure a newline character isn't added to the text. * `showNewTodoPopup` has been called with a `hand`. That's the hand of the user that tapped the \"Add todo button\". It belongs to an avatar, so we can actually ask the avatar if it would pretty please focus this text field, so the user can begin typing in it directly? If you'd be so kind. * The `addButton` uses the same `done` callback as `onReturn` * `cancelButton` just closes the popup, no questions asked. * Finally, `app:openPopupNearHand` will display our new fancy popup 60 centimeters away from the user's hand, which is a convenient distance at which to do your job. Warning: incoming rant {: .label .label-yellow } The cool thing about this popup is that if you have multiple people in the room, they can all get their own input popup, so they can add their own items without interfering with each other. This is an important and unusual aspect of UI design and development: all your UI is real time collaborative, so you have to consider how your application behaves when multiple people use it at the same time. For example, if you had added the input field directly to the main view, only one user would've been able to add items at a time, and they'd likely have interfered with each other's work. By using a personal popup, users can work naturally collaboratively and in tandem. Relax: rant over. {: .label .label-green } Here's what this new fancy popup should look like once you tap the \"Add todo\" button: ![A white surface with a text field, an 'add' button, and a 'cancel' button.](/assets/images/todo-progress-2.png) Before we continue, we'll need another asset. Download ![](/assets/images/checkmark.png) [checkmark.png](/assets/images/checkmark.png) and put it in `images/`. Update the top of `main.lua` to publish this asset: {% highlight lua %} assets = { quit = ui.Asset.File(\"images/quit.png\"), checkmark = ui.Asset.File(\"images/checkmark.png\"), } {% endhighlight %} Cool. Cool cool cool. Let's make it actually possible to add todo items, yeah? {% highlight lua %} function TodosView:addTodo(text) local todoView = ui.View(ui.Bounds{size=ui.Size(self.bounds.size.width*0.8,0.1,0.05)}) local checkButton = todoView:addSubview(ui.Button(ui.Bounds{size=ui.Size(0.1, 0.1, 0.05)})) checkButton.bounds:move(-self.bounds.size.width/2 + checkButton.bounds.size.width, 0, 0) checkButton:setDefaultTexture(assets.checkmark) checkButton.onActivated = function() self:removeTodo(todoView) end local label = todoView:addSubview(ui.Label{ bounds= todoView.bounds:copy():inset(0.1, 0.05, 0):move(0.05, 0,0), color= {0,0,0, 1}, halign= \"left\", text= text }) table.insert(self.todoViews, todoView) self:layout() self:addSubview(todoView) end function TodosView:removeTodo(todoView) local index = tablex.find(self.todoViews, todoView) table.remove(self.todoViews, index) todoView:removeFromSuperview() self:layout() end {% endhighlight %} This should start to look familiar. * `todoView` is the parent view of all the controls related to the todo list item. We store them in `self.todoViews` so we can layout them properly later. * `checkButton` is used to check off a completed item. We place it along the left edge, tell it to use our new fancy checkmark texture, and configure it to call an as-of-yet nonexistent `removeTodo` method. * `label` is the text label describing our item. Text is black (that's a list of Red, Green, Blue and Alpha, with components from 0.0 to 1.0), horizontally aligned to the left, with the text from the user. * We call `layout` so our new item is positioned correctly * And then we add it as a subview, yay! `removeTodo` just finds the given item in the list, and removes it from both the list and the UI, running a relayouting pass to adjust the other items' positions. That's awesome! We can now add and remove todo list items! Just one bummer: they all end up stacked on top of each other. We'll need to lay them out before this is usable. Let's replace our dummy `layout` with something better. {% highlight lua %} function TodosView:layout() local height = #self.todoViews * 0.13 + 0.25 local pen = ui.Bounds{ size=self.addButton.bounds.size:copy(), pose=ui.Pose(0, -height/2, self.addButton.bounds.size.depth/2) } pen:move(0, 0.07, 0) self.addButton:setBounds(pen:copy()) pen:move(0, 0.15, 0) for i, v in ipairs(self.todoViews) do v:setBounds(pen:copy()) pen:move(0, 0.13, 0) end self.quitButton.bounds:moveToOrigin():move( 0.52, height/2, 0.025) self.quitButton:setBounds() self.bounds.size.height = height self:setBounds() end {% endhighlight %} Here's a pattern I've brought with me all the way back from building black-and-white Mac apps in the 80s: using a `pen` variable which represents a rectangle (or rather, a 3D box!) where we want to \"stamp out\" our UI, moving the pen as we walk through our items. * We want to adjust the height of our UI to exactly fit our items. Each item is 13 cm tall, and then there's 25 cm of padding for the \"Add todos\" button. * The add button's size is a perfect template for our pen. Let's start the pen at the bottom of the window and lay out controls bottom-to-top, and also move it out from the surface so that our elements sit ON TOP of the surface, instead of embedded in it. * Let's add 7 cm of initial padding * There. Stamp the pen's current state into the add button's bounds. * Add another 15 cm of padding. * Stamp the pen onto each todo item view, adding 13 cm of padding for each item. * Figure out the perfect new location for the quit button, and... * Set the height of the whole app to the one we calculated at the start, and update the bounds so it's reflected on the users' headsets. You know what? I think this is pretty stellar. This'll do nicely. If you dotted every i, your app should look something like this: ## Deploying your app So, you built your fancy VR app. Now you want to show it off, and deploy it so all the Alloverse users in the world can run it in their places, right? Our plan is to provide a Dockerfile which sets everything up just right for you, and an `./allo/assist` invocation which deploys it onto Amazon ECS for you. Just a oneliner and it's deployed. Boom. We haven't gotten that for yet, though. Watch this space! ## Celebration If you made it this far, go eat a cinnamon roll, you deserve it. It's on me. Really, just [ping me on Discord](https://discord.gg/KhdMU6P6Uw) and it's yours. We'd at least love to hear from you, and see your creations. Once you make your own apps, even if you're not down with cinnamon rolls, do let us know, so we can feature your app in our app browser, blog and tweet about it, etc etc. ",
    "url": "/",
    "relUrl": "/"
  },"46": {
    "doc": "Intent",
    "title": "Intent",
    "content": "# {{ page.title }} Sent from agent to place over unreliable channel 0 every heartbeat to indicate movement of clients. This intent is then actuated onto the client state both by client-side interpolation and on the server at the server heart rate. Format of the packet on-wire today: ``` { \"cmd\": \"intent\", \"intent\": { \"zmovement\": 0, // 1 = maximum speed forwards \"xmovement\": 0, // 1 = maximum speed strafe right \"yaw\": 0, // absolute rotation around x in radians \"pitch\": 0, // absolute rotation around y in radians \"poses\": { \"head\": { \"matrix\": [m11, m12, ...m44], }, \"hand/left\": { \"matrix\": [m11, m12, ...m44], \"skeleton\": [ [m11, m12, ...m44], [m11, m12, ...m44], ... ], \"grab\": { // nil or description of grab //entity id of entity being grabbed \"entity\": \"asdf\", // to keep hand-to-entity spatial relationship constant during grab \"grabber_from_entity_transform\": [m11, m12, ...m44] } }, \"hand/right\": {same as hand/left} }, \"ack_state_rev\": 1234 } } ``` For the format of the matrix in `poses.*.matrix`, [see coordinate-system.md](coordinate-system). For `hand*.skeleton`: It's an array of matrices, each describing the pose of a node of the hand. There are 26 nodes, with each index as defined by OpenXR hand tracking. You can see a list of indexes (and node parents) in [lovr's documentation](https://lovr.org/docs/lovr.headset.getSkeleton) (with each index offset by 1 because lua, of course). To understand `ack_state_rev`, see (state.md)[state.md]. Planned version of the packet: ``` { \"intents\": { \"{entity id of avatar}\": { (same as under \"intent\" in today's version) }, \"{id of other owned entity}\": { // same as above } }, \"ack-state-rev\": 73892 // sequence number of state diff // we're acknowledging } ``` ",
    "url": "/protocol-reference/intent",
    "relUrl": "/protocol-reference/intent"
  },"47": {
    "doc": "Interactions",
    "title": "Interactions",
    "content": "# {{ page.title }} For an overview of what an interaction is, please see [README.md](README.md). These interactions are defined by alloserv. Third party developers may create any interactions they want. They can vote to make their own interactions official by opening an issue on this repo. ## Agent announce After an agent connects, before it can interact with the place it must announce itself and spawn its avatar entity. Failure to announce will lead to force disconnect. - Receiver: `place` - Type: `request` - Request body: ``` [ \"announce\", \"version\", 1, \"identity\", { // identity body goes here }, \"spawn_avatar\", { // same as \"spawn_entity\" key in \"Agent requests to spawn entity\" } ] ``` - Response: ``` [ \"announce\", \"{ID of avatar entity}\", \"{name of place}\" ] ``` ## Spawn entity - Receiver: `place` - Type: `request` - Request body: ``` [ \"spawn_entity\", { // list of initial values for components for new entity goes here \"children\": [ // list of new child entities to create; same body as for \"spawn_entity\". // These will automatically get a \"relationships\" component set up referencing // the parent entity. { // list of initial values for components for child of new entity goes here }, ... ] } ] ``` - Response: ``` [ \"spawn_entity\", \"{ID of entity if spawned}\" ] ``` ## Remove entity - Receiver: `place` - Type: `request` - Request body: ``` [ \"remove_entity\", \"{ID of entity to remove}\", \"{'reparent' or 'cascade'}\" ] ``` - Reparent: If the removed entity has children, they will be reparented to root - Cascade: If the removed entity has children, they will also be removed. - Response: ``` [ \"remove_entity\", \"ok\" ] ``` ## Change/add/remove component(s) in entity - Receiver: `place` - Type: `request` - Request body: ``` [ \"change_components\", \"{entity ID}\", \"add_or_change\", { // object with new values for components (regardless of if // component already exists on entity) } \"remove\", [ // keys of components to remove ] ] ``` Response: ``` [ \"change_components\", \"ok\" ] ``` A default ACL rule is set so that you must own the entity whose component you're changing, but this rule can be changed. ## Subscribe/unsubscribe - Receiver: `place` - Type: `request` - Request body for subscribe: ``` [ \"subscribe\", \"\"\"{guard pattern}\"\"\" ] ``` - Response: ``` [ \"subscribe\", \"{subscription ID}\" ] ``` - Unsubscribe request body: ``` [ \"unsubscribe\", \"{subscription ID}\" ] ``` - Response: ``` [ \"unsubscribe\", \"{'ok'|'not_subscribed'}\" ] ``` - Example: ``` [ \"interaction\", \"request\", \"1234\", \"place\", // place is the subscription gateway \"567\", [ \"subscribe\", \"\"\"[ \"new_tweet\", TweetSender, TweetBody ] where TweetSender == \"nevyn\" \"\"\" ] ``` In this scenario the place contains an app that publishes new tweets as interactions to the room. This interaction will ask the place to subscribe to all interaction publications which start with the word \"new_tweet\" followed by two fields. The guard clause asks that the sender must be \"nevyn\". If the guard matches, the publication interaction will be forwarded by the place from the sending agent to the subscribing agent. ## Modify ACL ## Entity points at another entity An entity, most likely the avatar of a user, is pointing with their finger at another entity. This is used as a precursor to actually interacting with it (\"poking it\"). The interaction describes two points in world space: the tip of the finger, and the intersection point between the ray from the finger and the nearest entity, so that the entity can know _where_ on itself someone is pointing. - Receiver: The pointed-at entity - Type: `one-way` - Body: ``` [ \"point\", [1.0, 2.0, 3.0], // finger tip in world space coordinates [4.0, 5.0, 6.0], // intersection point in world space coordinates ] ``` If the ray cast from the user's finger veers off the last pointed-at entity, one last message is sent to indicate that the user has stopped pointing at it. This is useful for removing highlight effect, etc. ``` [ \"point-exit\" ] ``` ## Entity pokes Once an entity is pointing at another entity, it can ask to \"physically\" interact with it, by turning the pointing into a poke. The poke doesn't contain vector information -- it's up to the receiver to correlate with pointing events, as those will be streaming a continuously updating location, while poking is a request-response which the receiver can reject. Such a rejection should be visualized, so that the sender's user can understand if and why poking failed. - Receiver: The pointed-at entity - Type: `request` - Request body: ``` [ \"poke\", {true|false} // whether poking started (true) or stopped (false) ] ``` - Success response: ``` [ \"poke\", \"ok\" ] ``` - Failure response: ``` [ \"poke\", \"failed\", \"{string explaining why, presentable to user}\" ] ``` ## Entity wishes to transmit live media Before an entity can transmit streamed audio, video or geometry, a track must be created along which to send that data. This interaction will add a [live_media](official-components#live-media) component to the sender's entity. Only audio, and only mono opus, is supported right now. - Receiver: `place` - Type: `request` - Request body: ``` [ \"allocate_track\", \"audio\", # media type 48000, # sample rate 1, # channel count \"opus\" # media format ] ``` - Success response: ``` [ \"allocate_track\", \"ok\", 3 # track_id ] ``` - Failure response: ``` [ \"allocate_track\", \"failed\", \"{string explaining why, presentable to user}\" ] ``` ",
    "url": "/protocol-reference/interactions",
    "relUrl": "/protocol-reference/interactions"
  },"48": {
    "doc": "Licenses used by Alloverse",
    "title": "Licenses used by Alloverse",
    "content": "# {{ page.title }} Alloverse is open source. You can read about [Alloverse's license in its LICENSE file](https://github.com/alloverse/docs/blob/master/LICENSE). In addition, Alloverse in turn uses a number of open source projects to work. The licenses of these projects are listed below. ## cJSON (used by allonet and more) Copyright (c) 2009-2017 Dave Gamble and cJSON contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## CPML (used by alloui) CPML is Copyright (c) 2016 Colby Klein . CPML is Copyright (c) 2016 Landon Manning . Code in vec3.lua is derived from hump.vector. (c) 2010-2013 Matthias Richter. MIT. Portions of mat4.lua are from LuaMatrix, (c) 2010 Michael Lutz. MIT. Code in simplex.lua is (c) 2011 Stefan Gustavson. MIT. Code in bound2.lua and bound3.lua are (c) 2018 Andi McClure. MIT. Code in quat.lua is from Andrew Stacey and covered under the CC0 license. Code in octree.lua is derived from UnityOctree. (c) 2014 Nition. BSD-2-Clause. ### The MIT License (MIT) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ### The BSD License (BSD-2-Clause) Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ## enet (used by allonet) Copyright (c) 2002-2016 Lee Salzman Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## elixir-cmake (used by alloplace) Copyright (c) 2018 Aramis Group, LLC dba code lever MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## elixir-uuid (used by alloplace) Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"{}\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright {yyyy} {name of copyright owner} Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ## graphmath (used by alloplace) This is free and unencumbered software released into the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For more information, please refer to ## jason (used by alloplace) Copyright 2017 Michał Muskała Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ## lovr (used by allovisor) Copyright (c) 2020 Bjorn Swenson and other LÖVR contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## lua (used by many) Copyright © 1994–2019 Lua.org, PUC-Rio. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## Oculus SDK (used by lovr-oculus-mobile-alloverse) Oculus Software Development Kit License Agreement Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved. The text of this may be found at: https://developer.oculus.com/licenses/sdk-3.5/ In order to obtain and use the Oculus Software Development Kit for mobile or for PC, You must first agree to the terms of this License. If you agree to the terms of this License, you may use the Oculus Software Development Kit. If you do not agree to the terms of this License, then you may not use the Oculus Software Development Kit. OCULUS SDK LICENSE 1. Subject to the terms and conditions of this License Agreement (the \"License\"), Facebook Technologies, LLC formerly known as Oculus VR, LLC (\"Oculus\") hereby grants to you a worldwide, non-exclusive, no-charge, royalty-free, sublicenseable copyright license to use, reproduce and redistribute (subject to restrictions below) the software contained in this Oculus Software Development Kit for PC and/or mobile (\"Oculus SDK\"), including, but not limited to, the samples, headers, LibOVR and VRLib headers, LibOVR and VRLib source and, subject to your compliance with Section 3, the headers, libraries and APIs to enable the Platform Services. This License is subject to the following terms and conditions: 1.1 This license grants you the non-exclusive license and right to use (i) the Oculus SDK to make engines, tools, applications, content, games and demos (collectively and generally referred to as \"Developer Content\") for use on the Oculus approved hardware and software products (\"Oculus Approved Products\") and which may incorporate the Oculus SDK in whole or in part in binary or object code; and (ii) the headers, libraries, APIs and other tools made available by Oculus to enable the use of Platform Services with your Developer Content. 1.2 For the sake of clarification, when you use the Oculus SDK in or with Developer Content, you retain all rights to your Developer Content, and you have no obligations to share or license Developer Content (including your source and object code) to Oculus or any third parties; provided, however, Oculus retains all rights to the Oculus SDK and the headers, libraries and APIs to the Platform Services and other tools made available by Oculus, including those that may be incorporated into your Developer Content. 1.3 You agree that as a condition of this License you will design and distribute your Developer Content to ensure that your Developer Content and any software required to use your Developer Content does not, and you will not, alter or interfere with the normal operation, behavior or functionality of the Oculus hardware or software or Oculus Approved Products, including: (i) the behavior of the \"Oculus button\" and \"XBox button\" implemented by the Oculus system software; (ii) any on-screen messages or information; (iii) the behavior of the proximity sensor in the Oculus hardware implemented by the Oculus system software; (iv) Oculus hardware or software security features; (v) end user's settings; or (vi) the Oculus Flash Screen Warnings. You also agree not to commit any act intended to interfere with the normal operation of the Oculus hardware or software or Oculus Approved Products, or provide software to Oculus users or developers that would induce breach of any Oculus agreements or that contains malware, viruses, hacks, bots, Trojan horses, or other malicious code. 1.4 You may not use the Oculus SDK for any purpose not expressly permitted by this License. You may not (except as and only to the extent any following restriction is prohibited by applicable law): (a) decompile; (b) reverse engineer; (c) disassemble; (d) attempt to derive the source code of the Oculus SDK or any part of the Oculus SDK, or any other software or firmware provided to you by Oculus REDISTRIBUTION 2. Subject to the terms and conditions of this License, your license to redistribute and sublicense the Oculus SDK is also expressly made subject to the following conditions: 2.1 You may sublicense and redistribute the source, binary, or object code of the Oculus SDK in whole for no charge or as part of a for-charge piece of Developer Content; provided, however, you may only license, sublicense or redistribute the source, binary or object code of the Oculus SDK in its entirety. The Oculus SDK (including, but not limited to LibOVR and VRLib), and any Developer Content that includes any portion of the Oculus SDK, may only be used with Oculus Approved Products and may not be used, licensed, or sublicensed to interface with software or hardware or other commercial headsets, mobile tablets or phones that are not authorized and approved by Oculus; 2.2 You must include with all such redistributed or sublicensed Oculus SDK code the following copyright notice: \"Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved.\" 2.3 You must give any other recipients of the Oculus SDK a copy of this License as such recipients, licensees or sublicensees may only use the Oculus SDK subject to the terms of this License and such recipient's, licensee's or sublicensee's agreement to and acceptance of this License with Oculus; and 2.4 The Oculus SDK includes a \"LICENSE\" text file (the \"License Notice\"), and any Oculus SDK distribution that you distribute must include a copy of this License with the License Notice. OCULUS PLATFORM SERVICES 3. Oculus makes the headers, libraries and APIs, software, and other tools made available by Oculus to enable Platform Services in connection with your Developer Content. You agree not to use any API, code or other tools, instruction or service provided by Oculus to enable or use a Platform Service other than in compliance with these terms. For more information go to https://developer.oculus.com. - \"Oculus Platform Framework\" means the suite of Oculus platform services, including but not limited to the Oculus file distribution and update system (enabling distribution and updates of Developer Content by Oculus, including through generated activation Keys), entitlement system, and account authentication, which list may be changed from time to time in Oculus' sole discretion. - \"Application Services\" means services provided by Oculus associated with the Platform, including but not limited to in-app purchasing, multiplayer matchmaking, friends, leader boards, achievements, rooms, voice over IP and cloud saves, which list may be changed from time to time in Oculus' sole discretion. - \"Platform\" means the Oculus virtual reality platform, including but not limited to the user experience, user interface, store, and social features, usable on Oculus approved hardware or any third-party device or operating system, including but not limited to iOS, Android, Windows, OS X, Linux, and Windows Mobile. - \"Platform Services\" means the Oculus Platform Framework and the Application Services. 3.1 Oculus Platform Services. Oculus makes certain Platform Services available to you to include and enable in your Developer Content. Developer Content that enables or includes any Platform Service must implement the Oculus Platform Framework with that Developer Content. Once your Developer Content has been authorized for use of the Platform Services, you are not required to update your Developer Content to include new Platform Services Oculus may make available as part of the Oculus Platform Framework. 3.2 Limited Authorization. You hereby grant Oculus the limited authorization reasonably necessary for Oculus's exercise of its rights and performance of its obligations under this Section 3. You agree that Oculus may use its contractors and affiliates for the purposes of exercising its rights and licenses set forth in this Section 3. 3.3. Internal Use. You agree that Oculus may grant its employees and internal contractors the right to use, perform and display the Developer Content you provide to Oculus for testing, evaluation and approval purposes, which shall be on a royalty-free basis. 3.4 Key Provision and Redemption. If you request that Oculus generate activation keys for your Developer Content on the Platform (\"Keys\") and Oculus agrees, you hereby grant Oculus (i) the right to generate Keys for you and (ii) a license to make available, reproduce, distribute, perform, and display the Developer Content to end users who have submitted a Key to Oculus. Oculus agrees to authenticate and make Developer Content available to any end user supplying a valid Key (unless the Developer Content has been removed or withdrawn). 3.5 Platform Services Requirements. You will not make any use of any API, software, code or other item or information supplied by Oculus in connection with the Platform Services other than to enhance the functionality of your Developer Content. In particular, you must not (nor enable others to): (i) defame, abuse, harass, stalk, or threaten others, or to promote or facilitate any prohibited or illegal activities; (ii) enable any functionality in your Developer Content that would generate excessive traffic over the Oculus network or servers that would negatively impact other users' experience, or otherwise interfere with or restrict the operation of the Platform Services, or Oculus's servers or networks providing the Platform Services; or (iii) remove, obscure, or alter any Oculus license terms, policies or terms of service or any links to or notices thereto. You may not sublicense any software, firmware or other item or information supplied by Oculus in connection with the Platform Service for use by a third party, unless expressly authorized by Oculus to do so. You agree not to use (or encourage the use of) the Platform Services for mission critical, life saving or ultra-hazardous activities. Oculus may suspend operation of or remove any Developer Content that does not comply with the restrictions in this License. You will not use the Oculus Avatar associated with the Oculus ID of any end user in your Developer Content without the express permission of that end user unless, (i) that end user is actively engaged with your Developer Content or (ii) that end user remains part of an active session of your Developer Content with whom other end users are interacting, whether or not that end user is then online. GENERAL PROVISIONS 4. Additional Materials 4.1 Oculus may include in this Oculus SDK additional content (e.g., samples) for demonstration, references or other specific purposes. Such content will be clearly marked in the Oculus SDK and is subject to any included terms and conditions. 4.2 Your use of third-party materials included in the Oculus SDK may be subject to other terms and conditions typically found in separate third-party license agreements or \"READ ME\" files included with such third-party materials. To the extent such other terms and conditions conflict with the terms and conditions of this License, the former will control with respect to the applicable third-party materials. 5. THE OCULUS SDK AND ANY COMPONENT THEREOF, THE OCULUS HEADERS, LIBRARIES AND APIS, AND THE PLATFORM SERVICES FROM OCULUS AND ITS CONTRIBUTORS ARE PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL OCULUS AS THE COPYRIGHT OWNER OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS OCULUS SDK, THE OCULUS HEADERS, LIBRARIES AND APIS OR THE PLATFORM SERVICES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. SOME JURISDICTIONS DO NOT PERMIT THE EXCLUSION OR LIMITATION OF IMPLIED WARRANTIES, SO YOU MAY HAVE ADDITIONAL RIGHTS. 6. This License does not grant permission to use the trade names, trademarks, service marks, or product names of Oculus, except as required for reasonable and customary use in describing the origin of the Oculus SDK, and reproducing the content of the License Notice file. Oculus reserves all rights not expressly granted to you under this License. Neither the name of Facebook Technologies, LLC, Oculus VR, LLC, Oculus, nor the names of Oculus's contributors, licensors, employees, or contractors, may be used to endorse or promote products developed using the Oculus SDK without specific prior written permission of Oculus. 7. You are responsible for ensuring that your use of the Oculus SDK and your Developer Content, including enabled Platform Services, complies with all applicable laws (including privacy laws) wherever your Developer Content is made available. You acknowledge and agree that you are solely responsible for any health and safety issues arising from your Developer Content. You will not collect end users' content or information, or otherwise access any Oculus site, using automated means (such as harvesting bots, robots, spiders, or scrapers) without Oculus' prior permission. 8. Your acceptance of the terms and conditions of this License in and of itself and for all Developer Content created as of March 28, 2016, may be evidenced by any of the following: your usage of the Oculus SDK, or acceptance of the license agreement. As this License is updated for future releases of the Oculus SDK, you agree to abide by and meet all requirements of future updates of this License for those future Oculus SDK releases, with acceptance evidenced by usage of the Oculus SDK or any element thereof and the future updates of this License will apply for that future Developer Content that may be developed for or with that future Oculus SDK or any element thereof (i.e., you cannot sidestep out of the requirements of future updates of the License by developing against an older release of the Oculus SDK or License). 9. Oculus reserves the right to terminate this License and all your rights hereunder immediately in the event you materially breach this License. 10. Furthermore, Oculus also reserves the right to cancel or terminate this License for any of the following reasons: a. Intellectual property infringement by you with Developer Content created by you that is used with or by the Oculus SDK, or any of the Platform Services; b. Developer Content (including enabling Platform Services) that violates applicable law; c. Health and safety issues associated with your Developer Content; d. Failure to comply with or use properly the Oculus Flash Screen Warnings; e. Use of the Oculus SDK with a commercial product other than an Oculus Approved Product; f. Failure to provide required notices as set forth above; and g. Failure to observe the restrictions in Section 3.5. 11. You agree to fully indemnify Oculus from any and all losses, costs, damages and expenses (including reasonable attorney's fees) arising out of your Developer Content or any matter set forth in Sections 6, 7 and 10(a) through (g). 12. Oculus may discontinue or change functionality of the Platform Services at any time, and your continued use of the Platform Services or use of any modified or additional Platform Services is conditioned upon your adherence to the terms of this License, as modified by Oculus from time to time. 13. In the event any provision of this License is determined to be invalid, prohibited or unenforceable by a court or other body of competent jurisdiction, this License shall be construed as if such invalid, prohibited or unenforceable provision has been more narrowly drawn so as not to be invalid, prohibited or unenforceable. 14. You may not assign any rights or obligations under this License without the advance written consent of Oculus, which may be withheld in its sole discretion. Oculus may assign its rights or obligations under this License in its sole discretion. 15. Failure of either party at any time to enforce any of the provisions of this License will not be construed as a waiver of such provisions or in any way affect the validity of this License or parts thereof. 16. Your remedies under this License shall be limited to the right to collect money damages, if any, and you hereby waive your right to injunctive or other equitable relief. 17. You will comply, and will not cause Oculus to not comply (by for example, providing Developer Content to Oculus under this Agreement for which required export clearances have not been obtained), with all applicable export control laws of the United States and any other applicable governmental authority, including without limitation, the U.S. Export Administration Regulations. You agree that this License and the Oculus SDK and accompanying documentation are Oculus's confidential information (and is not publicly available), and you will not use it, disclose it or make it available to others except in accordance with the terms of this License. 18. This License shall be governed by the laws of the State of California, without giving effect to conflict of laws provisions or principles thereof. The parties agree that, except as provided below, all disputes relating to this License shall be resolved by binding non-appearance-based arbitration before a single neutral arbitrator in San Francisco, California. The arbitration will be conducted in the English language by a single arbitrator who is an attorney-at- law with at least fifteen (15) years' experience in consumer and technology transactions and who is also a member of the JAMS roster of arbitrators. If You and Oculus cannot agree on a mutually acceptable arbitrator within thirty (30) days after the arbitration is initiated, then JAMS will pick a neutral arbitrator who meets such qualifications. The arbitration shall be conducted in accordance with the rules and procedures of JAMS then in effect, and the judgment of the arbitrator shall be final and capable of entry in any court of competent jurisdiction. The parties undertake to keep confidential all awards in their arbitration, together with all materials in the proceedings created for the purpose of the arbitration and all other documents produced by another party in the proceedings not otherwise in the public domain, save and to the extent that disclosure may be required of a party by legal duty, to protect or pursue a legal right or to enforce or challenge an award in legal proceedings before a court or other judicial authority. You and Oculus agree the following may be submitted to a court of competent jurisdiction located within San Francisco, California and further agree to submit to the personal jurisdiction of the courts located within San Francisco, California in connection with (a) any entrance of an arbitrator's judgment or decision, (b) any dispute with respect to the arbitration process or procedure, (c) Oculus' exercise of any of its equitable rights or remedies or (d) any claims regarding the ownership, validity, enforceability and/or infringement of any intellectual property rights. ## opus (used by allonet) Copyright 2001-2011 Xiph.Org, Skype Limited, Octasic, Jean-Marc Valin, Timothy B. Terriberry, CSIRO, Gregory Maxwell, Mark Borgerding, Erik de Castro Lopo Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Opus is subject to the royalty-free patent licenses which are specified at: Xiph.Org Foundation: https://datatracker.ietf.org/ipr/1524/ Microsoft Corporation: https://datatracker.ietf.org/ipr/1914/ Broadcom Corporation: https://datatracker.ietf.org/ipr/1526/ ## penlight (used by many) Copyright (C) 2009-2016 Steve Donovan, David Manura. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## phoenix (used by web) Copyright (c) 2014 Chris McCord Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ## poison (used by alloplace) Creative Commons Legal Code CC0 1.0 Universal CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER. Statement of Purpose The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\"). Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others. For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights. 1. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following: i. the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work; ii. moral rights retained by the original author(s) and/or performer(s); iii. publicity and privacy rights pertaining to a person's image or likeness depicted in a Work; iv. rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below; v. rights protecting the extraction, dissemination, use and reuse of data in a Work; vi. database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and vii. other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof. 2. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose. 3. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose. 4. Limitations and Disclaimers. a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document. b. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law. c. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work. d. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work. ## Unity unit testing (used by allonet) The MIT License (MIT) Copyright (c) 2007-14 Mike Karlesky, Mark VanderVoord, Greg Williams Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "url": "/community/licenses",
    "relUrl": "/community/licenses"
  },"49": {
    "doc": "Points, Pokes and Grabs",
    "title": "Points, Pokes and Grabs",
    "content": "# {{ page.title }} Coming soon {: .label .label-yellow } ",
    "url": "/concepts/points-pokes-and-grabs",
    "relUrl": "/concepts/points-pokes-and-grabs"
  },"50": {
    "doc": "State Diffs",
    "title": "State Diffs",
    "content": "# {{ page.title }} Every server heart-beat, the server sends the world state to all connected agents on unreliable channel 0. ## State representation The world representation is stored as a big JSON document like so: ``` { \"entities\": { \"abc123\": { \"id\": \"abc123\", \"components\": { ... } } }, \"revision\": 1234 } ``` - `entities`: A dictionary from entity ID to [entity description](/protocol-reference/#entity). - `revision`: An integer ID for this specific revision of the world. Monotonically increases until it reaches the biggest sequential integer that a 64-bit IEEE double can represent, which is 2^53, whereafter it will wrap around back to 0. (damn JSON). ## Deltas Sending this document in its entirety every server heart-beat would be needlessly wasteful, so instead only the difference to a previous known-good state is sent. An agent acknowledges successful receival of world state by setting `ack_state_rev` in [`intent`](intent) to the received world state, whereafter the server will diff against that revision instead. Note that it takes time for this ACK to be received, so you might continue to receive diffs against an older version; so you need to keep a history of previous states to apply diffs to. The packet on channel 0 received in the client can take three forms: ### Format 1: `set` If the server is unable to diff, it will just send the full world state document. ``` { \"patch_style\": \"set\", \"entities\": ..., \"revision\": 1234 } ``` Note that `patch_style` is not part of the document, and should be removed before the document is stored to history. ### Format 2: `apply` Indicates that the payload is an [RFC 6902](https://tools.ietf.org/html/rfc6902) JSON Patch. ``` { \"patch_style\": \"apply\", \"patch_from\": 1233, \"patches\": [ ... /*RFC 6902 patches*/ ] } ``` - `patch_from` indicates the revision to apply the patches to - `patches` is a JSON list of RFC 6902 patches to apply to said revision from history The patches should be applied and the resulting document stored to history. If the referenced `from` revision is not available or history, or if patching fails, you should set intent's `ack_state_rev` back to 0 to request a full `set` state. **Note**: This format seems to almost always be less efficient than RFC 7386, so its support is likely to be removed. ### Format 3: `merge` Indicates that the payload is an [RFC 7386](https://tools.ietf.org/html/rfc7396) JSON Merge Patch. ``` { \"patch_style\": \"merge\", \"patch_from\": 1233, ... // rest of document is an RFC 7386 payload } ``` - Note that `patch_style` and `patch_from` must be removed from the document before it's a valid RFC 7386 merge patch. - `patch_from` indicates the revision to apply the patches to The merge patch should be applied and the resulting document stored to history. If the referenced `from` revision is not available or history, or if patching fails, you should set intent's `ack_state_rev` back to 0 to request a full `set` state. # Older versions Version 1 sent the complete world-state as is, and with entities as an array rather than an object. It looked like this: ``` entities: [ // list of all entities; see Entities above for structure ], revision: 1234 // monotonically increasing integer (will roll over to 0 after INT64_MAX!) ``` ",
    "url": "/protocol-reference/state-diffs",
    "relUrl": "/protocol-reference/state-diffs"
  },"51": {
    "doc": "URL Definitions",
    "title": "URL Definitions",
    "content": "# {{ page.title }} URLs are used to identify and locate various resources in Alloverse. This document should be a full list of such URLs and their format. ## Alloplace There is currently one format for locating an alloplace server: `alloplace://{host}:{port}` - `host`: Hostname or IP of machine that is running the `alloplace` service - `port`: This is the enet UDP endpoint for the listen socket. Optional: default value is 21337. Such an URL should be fed into `alloclient_connect` or its high-level equivalents, and `allonet` will take care of parsing and connecting to the server at that URL. ### Virtual hosting (unimplemented) The downside of this scheme is that it doesn't allow for virtual hosting: with the same domain name for the same IP, you'll end up at the same placeserv unless you include a custom port in the URL, which is ugly. One solution is to use a HTTPS gateway which returns the real alloplace URL given a URL of this form: `alloplacegw://{host}:{port}/{path}` Another solution is to have a \"load balancer\" allplace socket which forwards to an internal instance. This solution can use the original `alloplace://` url schema. ## Alloapp (unimplemented) Launching an alloapp from a URL is not implemented yet. Here's how I imagine it working: `alloapp://{host}:{port}/{path}?{params}` ... with HTTP headers for user identity and alloplace to connect to. This is a HTTPS endpoint which is basically a \"CGI launcher\". Upon POST, it'll launch an instance of the app and connect it to the requested alloplace. ",
    "url": "/protocol-reference/url-definitions",
    "relUrl": "/protocol-reference/url-definitions"
  },"52": {
    "doc": "Wire Protocol",
    "title": "Wire Protocol",
    "content": "# {{ page.title }} What are the actual bytes travelling on the wire? They all seem to be json payload followed by a newline character... ## S->C State stream - Channel: 0 (\"CHANNEL_STATEDIFFS\") - Kind: Unreliable - Payload specification: [State](state-diffs) ``` >\\n ``` ## C->S Intent - Channel: 0 (\"CHANNEL_STATEDIFFS\") - Kind: Unreliable - Payload specification: [Intent](intent) ``` >\\n ``` ## S->C Interaction - Channel: 1 (\"CHANNEL_COMMANDS\") - Kind: Reliable - Payload specification: [Entity to entity interaction](/protocol-reference/#entity-to-entity-interaction-requestresponsepubsub) ``` >\\n ``` Version 0 implements this packet as: ``` { \"cmd\": \"interact\", \"interact\": { \"from_entity\": \"...\", \"to_entity\": \"...\", \"cmd\": \"...\" } }\\n ``` ## C->S Interaction - Channel: 1 (\"CHANNEL_COMMANDS\") - Kind: Reliable - Payload specification: [Entity to entity interaction](/protocol-reference/#entity-to-entity-interaction-requestresponsepubsub) ``` >\\n ``` ## C->S->C Media track packet - Channel: 3 (\"CHANNEL_MEDIA\") - Kind: Unreliable - Related interaction: [allocate_track](/protocol-reference/interactions#entity-wishes-to-transmit-live-media) ``` >>\\n ``` Yeah that's right. Even audio packets have that stupid newline at the end. ## C->S->C Clock sync packet - Channel: 4 (\"CHANNEL_CLOCK\") - Kind: Unreliable - Payload: ``` { \"client_clock\": 123.0, \"server_clock\": 456.0 }\\n ``` This packet is sent from the client once a second with only the `client_clock` field set to its local monotonic clock time. It is immediately bounced back from the server, with its `server_clock` set. The client can thus calculate its round-trip latency (`now() - response[\"client_clock\"]`), and delta between its clock and the server clock. Using all this information, it can then extrapolate the world time and update `place`'s [`clock`](https://github.com/alloverse/docs/blob/master/specifications/components.md#clock) component. ## Unspecified - C->S asset request/response - S->C asset request/response - S->C asset force delivery ",
    "url": "/protocol-reference/wire-protocol",
    "relUrl": "/protocol-reference/wire-protocol"
  },"53": {
    "doc": "Writing apps with AlloUI",
    "title": "Writing apps with AlloUI",
    "content": "# {{ page.title }} Coming soon {: .label .label-yellow } ",
    "url": "/concepts/writing-apps-with-alloUI",
    "relUrl": "/concepts/writing-apps-with-alloUI"
  }
}